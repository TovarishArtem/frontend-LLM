from fastapi import FastAPI, HTTPException, Depends
from fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm
from passlib.context import CryptContext
from datetime import datetime, timedelta
from jose import JWTError, jwt
from pydantic import BaseModel
from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware  # ‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º CORSMiddleware
from passlib.context import CryptContext
from datetime import datetime, timedelta
from jose import JWTError, jwt
from pydantic import BaseModel


app = FastAPI()

# –î–æ–±–∞–≤–ª—è–µ–º middleware –¥–ª—è CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:3000"],  # –†–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ —ç—Ç–æ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫
    allow_credentials=True,
    allow_methods=["*"],  # –†–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ HTTP –º–µ—Ç–æ–¥—ã (GET, POST –∏ —Ç.–¥.)
    allow_headers=["*"],  # –†–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
)

# –§–µ–π–∫–æ–≤–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
fake_db = {}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ JWT
SECRET_KEY = "your_secret_key"
ALGORITHM = "HS256"
ACCESS_TOKEN_EXPIRE_MINUTES = 30

# Pydantic-–º–æ–¥–µ–ª—å –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
class UserCreate(BaseModel):
    username: str
    password: str

# –•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è
pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

# –¢–æ–∫–µ–Ω-–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
oauth2_scheme = OAuth2PasswordBearer(tokenUrl="token")

def create_access_token(data: dict, expires_delta: timedelta):
    """–°–æ–∑–¥–∞–µ—Ç JWT-—Ç–æ–∫–µ–Ω"""
    to_encode = data.copy()
    expire = datetime.utcnow() + expires_delta
    to_encode.update({"exp": expire})
    return jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)

@app.post("/register")
async def register(user: UserCreate):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    print(f"üì• –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user}")  # –õ–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏—Ö–æ–¥—è—Ç
    if user.username in fake_db:
        raise HTTPException(status_code=400, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

    hashed_password = pwd_context.hash(user.password)
    fake_db[user.username] = hashed_password
    print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {user.username}")  # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é

    return {"message": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω"}


@app.post("/token")
def login(form_data: OAuth2PasswordRequestForm = Depends()):
    """–í—Ö–æ–¥ –∏ –≤—ã–¥–∞—á–∞ —Ç–æ–∫–µ–Ω–∞"""
    user = fake_db.get(form_data.username)
    if not user or not pwd_context.verify(form_data.password, user):
        raise HTTPException(status_code=400, detail="–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
    
    access_token = create_access_token(
        data={"sub": form_data.username}, expires_delta=timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)
    )
    return {"access_token": access_token, "token_type": "bearer"}

@app.get("/protected")
def protected_route(token: str = Depends(oauth2_scheme)):
    """–ó–∞—â–∏—â–µ–Ω–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç"""
    try:
        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
        username = payload.get("sub")
        if username not in fake_db:
            raise HTTPException(status_code=401, detail="–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω")
    except JWTError:
        raise HTTPException(status_code=401, detail="–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω")
    return {"message": "–î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω", "user": username}

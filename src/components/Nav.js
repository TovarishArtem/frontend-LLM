import React, { useState, useEffect } from 'react'
import {Xmark} from '@gravity-ui/icons';

const Nav = ({
	onShowAside,
	dialogs,
	currentDialogId,
	onSelect,
	onCreate,
	onDelete,
}) => {
	const [showSettings, setShowSettings] = useState(false)
	const [maxLength, setMaxLength] = useState(700);
	const [numBeams, setNumBeams] = useState(1);
	const [numReturnSequences, setNumReturnSequences] = useState(1);
	const [doSample, setDoSample] = useState(false);
	const [earlyStopping, setEarlyStopping] = useState(false);
	const [prompt, setPrompt] = useState('');


	const navClassName = window.innerWidth < 768 ? 'nav_phone' : 'nav_desktop'
	const activeClass = onShowAside ? ' active' : ''

	const toggleSettings = () => setShowSettings(!showSettings)
	useEffect(() => {
	const saved = JSON.parse(localStorage.getItem('generationSettings'));
	if (saved) {
		setMaxLength(saved.maxLength ?? 300);
		setNumBeams(saved.numBeams ?? 4);
		setNumReturnSequences(saved.numReturnSequences ?? 1);
		setDoSample(saved.doSample ?? true);
		setEarlyStopping(saved.earlyStopping ?? true);
	}
}, []);

	useEffect(() => {
	localStorage.setItem(
		'generationSettings',
		JSON.stringify({
			prompt,
			maxLength,
			numBeams,
			numReturnSequences,
			doSample,
			earlyStopping,
		})
	);
}, [ prompt, maxLength, numBeams, numReturnSequences, doSample, earlyStopping]);
	

	return (
		
		<nav className={navClassName + activeClass}>
			<div className='our_dialog'>
				<p>–í–∞—à–∏ –¥–∏–∞–ª–æ–≥–∏</p>
				<button onClick={onCreate}>+ –ù–æ–≤—ã–π</button>
			</div>
			<ul className='ul_dialogs'>
				{dialogs.map((dialog) => {
					const isActive = dialog.id === currentDialogId;

					return (
					<li
						key={dialog.id}
						className={isActive ? 'active' : ''}
						onClick={() => onSelect(dialog.id)}
						style={{ cursor: 'pointer', position: 'relative' }}
					>
						<span className='dialog_item'>
						{dialog.name || '–ù–æ–≤—ã–π –¥–∏–∞–ª–æ–≥'}
						</span>

						<Xmark
						className='button_delete'
						onClick={(e) => {
							e.stopPropagation(); // üîë –±–ª–æ–∫–∏—Ä—É–µ–º –≤—Å–ø–ª—ã—Ç–∏–µ –∫–ª–∏–∫–∞
							onDelete(dialog.id);
						}}
						title='–£–¥–∞–ª–∏—Ç—å –¥–∏–∞–ª–æ–≥'
						/>

						<hr style={{ width: '100%', opacity: '0.2' }} />
					</li>
					);
				})}
				</ul>


			<div className='settings'>
				<ul className='ul_settings'>
					<li onClick={toggleSettings} style={{ cursor: 'pointer' }}>
						–ü–∞—Ä–∞–º–µ—Ç—Ä—ã
					</li>
					<li>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</li>
				</ul>

				{showSettings && (
					<div className='model-settings-popup'>
					<div className='slider-setting'>
						{/* Prompt */}
					<div className='slider-setting'>
					<div className='tooltip-wrapper'>
						<label htmlFor='prompt'>Prompt (–Ω–∞—á–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç):</label>
						<div className='tooltip-text'>
						–¢–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –∫ –∑–∞–ø—Ä–æ—Å—É<br />
						–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –∫–∞–∫ —Å—Ç–∞—Ä—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.
						</div>
					</div>
					<input
						type='text'
						id='prompt'
						value={prompt}
						onChange={e => setPrompt(e.target.value)}
						placeholder='–í–≤–µ–¥–∏—Ç–µ prompt...'
					/>
					</div>
						{/* Num beams */}
						<div className='slider-setting'>
							<div className='tooltip-wrapper'>
								<label htmlFor='numBeams'>Num beams: {numBeams}</label>
								<div className='tooltip-text'>
								<strong>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ "–ª—É—á–µ–π" (–≤–∞—Ä–∏–∞–Ω—Ç–æ–≤) –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–∏ beam search.</strong>
								–ß–µ–º –±–æ–ª—å—à–µ num_beams, —Ç–µ–º –≤—ã—à–µ —à–∞–Ω—Å –Ω–∞–π—Ç–∏ –±–æ–ª–µ–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç,<br />
								–Ω–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –º–µ–¥–ª–µ–Ω–Ω–µ–µ.
								</div>
								</div>
								<input
									type='range'
									id='numBeams'
									min='1'
									max='7'
									step='1'
									value={numBeams}
									onChange={e => setNumBeams(Number(e.target.value))}
									/>
								</div>
									</div>

						{/* Return Sequences*/}
						<div className='slider-setting'>
							<div className='tooltip-wrapper'>
								<label htmlFor='numReturnSequences'>Return Sequences: {numReturnSequences}</label>
								<div className='tooltip-text'>
								<strong>–°–∫–æ–ª—å–∫–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞ –≤–µ—Ä–Ω—É—Ç—å.</strong><br / >
								–ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.
								–î–æ–ª–∂–Ω–æ –±—ã—Ç—å ‚â§ num_beams.
								</div>
								</div>
							<input
								type='range'
								id='numReturnSequences'
								min='1'
								max='7'
								step='1'
								value={numReturnSequences}
								onChange={e => setNumReturnSequences(Number(e.target.value))}
							/>
						</div>
						{/* doSample*/}
						<div className='slider-setting'>
							<div className='tooltip-wrapper'>
							<label htmlFor='topP'>do_sample {doSample}</label>
							<div className='tooltip-text'>
								<strong>–í–∫–ª—é—á–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é –≤—ã–±–æ—Ä–∫—É —Ç–æ–∫–µ–Ω–æ–≤ (sampling).</strong><br />
								true ‚Äî –æ—Ç–≤–µ—Ç—ã –±–æ–ª–µ–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ.
								false ‚Äî –º–æ–¥–µ–ª—å –≤—Å–µ–≥–¥–∞ –≤—ã–±–∏—Ä–∞–µ—Ç —Å–∞–º–æ–µ –≤–µ—Ä–æ—è—Ç–Ω–æ–µ —Å–ª–æ–≤–æ.
							</div>
							</div>
							<input
								type='checkbox'
								checked={doSample}
								onChange={e => setDoSample(e.target.checked)}
							/>
						</div>
						{/* early_stopping */}
						<div className='slider-setting'>
							<div className='tooltip-wrapper'>
							<label htmlFor='topP'>early_stopping{earlyStopping}</label>
							<div className='tooltip-text'>
								<strong>–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é, –µ—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –∫–æ–Ω–µ—Ü –ª–æ–≥–∏—á–µ—Å–∫–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.</strong><br />
								–ü–æ–∑–≤–æ–ª—è–µ—Ç –∏–∑–±–µ–∂–∞—Ç—å "–ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏" –∏–ª–∏ –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã—Ö —Ñ—Ä–∞–∑.
							</div>
							</div>
							<input
								type='checkbox'
								checked={earlyStopping}
								onChange={e => setEarlyStopping(e.target.checked)}
							/>
						</div>
						{/* Max Length */}
						<div className='slider-setting'>
							<div className='tooltip-wrapper'>
							<label htmlFor='maxLength'>Max Tokens: {maxLength}</label>
							<div className='tooltip-text'>
								–û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤<br />
								–≤ –æ—Ç–≤–µ—Ç–µ –º–æ–¥–µ–ª–∏. –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –º–æ–∂–µ—Ç<br />
								–ø–æ–≤–ª–∏—è—Ç—å –Ω–∞ –≤—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.
							</div>
							</div>
							<input
							type='range'
							id='maxLength'
							min='10'
							max='1000'
							step='10'
							value={maxLength}
							onChange={e => setMaxLength(Number(e.target.value))}
							/>
						</div>
						<button onClick={() => setShowSettings(false)}>–ó–∞–∫—Ä—ã—Ç—å</button>
						</div>
					
				)}
			</div>
		</nav>
	)
}

export default Nav
